#include "xcpldapp.h"

#define IMAGEFILE <xcpldapp/xcpldapp.iml>
#include <Draw/iml_source.h>



xcpldapp::xcpldapp()
{
	CtrlLayout(*this, "XMOS Slice kit configurator");
	dlMBoard.Add("XP-SKC-L2");
	dlSBoard.Add("XP-SKC-L2");
	dlSBoard.Add("XA-SK-E100");
	dlSBoard.Add("XA-SK-AUDIO");
	dlSBoard.Add("XA-SK-SCR480");
	dlSBoard.Add("XA-SK-GPIO");
	dlSBoard.Add("XA-SK-SDRAM");
	dlMConn.Add("Star").Add("Triangle").Add("Square").Add("Circle");
	dlMBoard.WhenAction= THISBACK(Dlmboard);
	dlSBoard.WhenAction= THISBACK(Dlsboard);
	dlMConn.WhenAction= THISBACK(Dlmconn);
	aPins.WhenAction=THISBACK(Apins);
	bnVerilog.WhenAction= THISBACK(Bnverilog);
}
void xcpldapp::Dlsboard(){
	//do nothing right now
	sboard= (board_te)dlSBoard.GetIndex();
	UpdatePins();
}
void xcpldapp::Dlmconn(){
	mconnector = (connector_te)dlMConn.GetIndex();
	UpdatePins();
}
void xcpldapp::Dlmboard(){
	UpdatePins();
}
void xcpldapp::Apins(){
	//
}
String xcpldapp::GetCpuPort(String pin){
	#define DEF(conid, pins, pinm) if (conid==mconnector) if (pins == pin) return pinm;
	#include "conpins.def"
	#undef DEF
	return "-";
}
void xcpldapp::UpdatePins(){
	aPins.Reset();
	aPins.AddColumn("Nr");
	aPins.AddColumn("Function");
	aPins.AddColumn("Pin");
	aPins.AddColumn("Description");
	aPins.AddColumn("Direction");
	aPins.AddColumn("Port");
	aPins.AllSorting();
	int nr=0;
	#define DEF(bid, fn, pin, desc, dir) if (sboard==bid){ aPins.Add(nr, fn, pin, desc, dir, GetCpuPort(pin)); nr++;};
	#include "board.def"
	#undef DEF
}
void xcpldapp::Bnverilog(){
//TODO: a lot...
	FileOut s("out.v");
	s<<"//Generated by xcpldapp\n";
	s<<"module xmos_config\n( nRST, CLK, ";
	
	int lines=25;
	s<<"CA["<<lines<<"], ";
	s<<"CB["<<lines<<"]";
	/*
	for (int i=0; i<lines; i++){
		if (i) s<<", ";
		if (!(i&3)) s<<"\n  ";
		s<<"CA["<<i<<"]";
		
	}*/
	s<<"\n)\n";
	s<<"localparam lines ="<<lines<<";\n\n";
	s<<"input nRST;\n";
	s<<"input CLK;\n";
	s<<"inout ["<<lines<<"] CA;\n";
	s<<"inout ["<<lines<<"] CB;\n\n";
	
	s<<"reg [lines-1:0] data;\n";
	s<<"wire [lines-1:0] lineA;\n";
	s<<"wire [lines-1:0] lineB;\n";
	s<<"reg [lines-1:0] dir;\n\n";
	for (int i=0; i<26; i++){
		s<<"ALT_IOBUF iob  (.i(data["<<i<<"]), .oe(dir["<<i<<"]), .o(lineA["<<i<<"]),.io(CA["<<i<<"]));\n";
		s<<"ALT_IOBUF iob  (.i(data["<<i<<"]), .oe(~dir["<<i<<"]), .o(lineB["<<i<<"]),.io(CB["<<i<<"]));\n";
		//defparam <instance_name>.weak_pull_up_resistor = "off";
	}
	
	s<<"\nalways @(posedge CLK or negedge nRST)\nbegin\n";
	s<<"  if (~nRST)\n  begin\n";
	s<<"    dir =  'b";
	bool input=false;
	for (int i=0;i<lines; i++) s<<(input?"1":"0"); //TODO: line drive
	s<<";  // reset state (SETUP_initial)\n";
	s<<"    data=0;\n";
	s<<"  end\n";
	s<<"  else\n  begin\n";
	s<<"    for (integer i=rest; i<lines; i=i+1) data[i] = dir[i]?lineB[i]:lineA[i];\n";
	s<<"  end\n";
	s<<"end //always clk or nRST\n\n";
	s<<"endmodule;\n\n";
	s.Close();
	
}
GUI_APP_MAIN
{
	xcpldapp().Run();
}
